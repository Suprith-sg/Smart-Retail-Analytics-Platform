-- Create a new database (schema) if it doesn't exist
CREATE DATABASE IF NOT EXISTS smart_retail_db;

-- Use the newly created database
USE smart_retail_db;

-- 1. Products Table
-- Stores information about each unique product sold.
CREATE TABLE Products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL,
    category VARCHAR(100),
    brand VARCHAR(100),
    unit_price DECIMAL(10, 2) NOT NULL,
    cost_price DECIMAL(10, 2),
    sku VARCHAR(50) UNIQUE, -- Stock Keeping Unit, should be unique
    description VARCHAR(1000)
);

-- 2. Customers Table
-- Stores information about registered customers. Optional but good for personalized analytics.
CREATE TABLE Customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE,
    phone_number VARCHAR(20),
    address VARCHAR(500),
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 3. Sales Table (Transactions Header)
-- Records summary information for each completed sales transaction.
CREATE TABLE Sales (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT, -- Can be NULL for guest customers
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(12, 2) NOT NULL,
    payment_method VARCHAR(50), -- e.g., 'Credit Card', 'Cash', 'UPI'
    store_id INT, -- If you have multiple store locations (could be FK to a Stores table if added later)
    -- Define foreign key constraint to Customers table
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- 4. SaleItems Table (Transaction Line Items)
-- Details individual products sold within a specific sales transaction.
CREATE TABLE SaleItems (
    sale_item_id INT AUTO_INCREMENT PRIMARY KEY,
    transaction_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    unit_price_at_sale DECIMAL(10, 2) NOT NULL, -- Price at the time of sale (important for historical accuracy)
    item_total DECIMAL(12, 2) NOT NULL, -- Calculated: quantity * unit_price_at_sale
    -- Define foreign key constraint to Sales table
    FOREIGN KEY (transaction_id) REFERENCES Sales(transaction_id),
    -- Define foreign key constraint to Products table
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- 5. Inventory Table
-- Tracks the current stock levels of each product.
CREATE TABLE Inventory (
    inventory_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL UNIQUE, -- Each product has one inventory record
    current_stock_quantity INT NOT NULL,
    reorder_level INT, -- Threshold at which to reorder
    last_updated_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    location VARCHAR(100), -- e.g., 'Warehouse A', 'Store Shelf 1'
    -- Define foreign key constraint to Products table
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

--
-- Sample Data Insertion
--
-- It's good practice to insert data after all tables are created to avoid foreign key constraint issues.

-- Insert data into Products table
INSERT INTO Products (product_name, category, brand, unit_price, cost_price, sku, description) VALUES
('Laptop Pro X1', 'Electronics', 'TechCorp', 1200.00, 900.00, 'ELC001', 'High-performance laptop for professionals'),
('Wireless Mouse M300', 'Electronics', 'LogiTech', 25.50, 15.00, 'ELC002', 'Ergonomic wireless mouse'),
('Mechanical Keyboard K900', 'Electronics', 'Razer', 99.99, 60.00, 'ELC003', 'Gaming mechanical keyboard with RGB'),
('Cotton T-Shirt', 'Apparel', 'FashionWear', 15.00, 7.50, 'APP001', '100% organic cotton t-shirt, various colors'),
('Denim Jeans Slim Fit', 'Apparel', 'BlueStyle', 45.00, 25.00, 'APP002', 'Classic slim fit denim jeans'),
('Coffee Beans 500g', 'Groceries', 'AromaCafe', 12.99, 8.00, 'GRC001', 'Premium Arabica coffee beans, medium roast'),
('Organic Milk 1L', 'Groceries', 'DairyPure', 3.50, 2.00, 'GRC002', 'Fresh organic whole milk');

-- Insert data into Customers table
INSERT INTO Customers (first_name, last_name, email, phone_number, address) VALUES
('Alice', 'Smith', 'alice.smith@example.com', '123-456-7890', '123 Main St, Anytown'),
('Bob', 'Johnson', 'bob.j@example.com', '987-654-3210', '456 Oak Ave, Otherville'),
('Charlie', 'Brown', 'charlie.b@example.com', '555-123-4567', '789 Pine Ln, Somewhere');

-- Insert data into Sales table
-- Assuming customer_ids generated by AUTO_INCREMENT start from 1
INSERT INTO Sales (customer_id, transaction_date, total_amount, payment_method, store_id) VALUES
(1, '2024-07-15 10:30:00', 1225.50, 'Credit Card', 1), -- Alice bought Laptop and Mouse
(2, '2024-07-15 11:00:00', 60.00, 'Cash', 1), -- Bob bought Jeans
(1, '2024-07-16 09:45:00', 16.49, 'UPI', 2), -- Alice bought Coffee and Milk
(NULL, '2024-07-16 14:00:00', 99.99, 'Credit Card', 1); -- Guest bought Keyboard

-- Insert data into SaleItems table
-- You'll need to know the product_ids and transaction_ids from the previous inserts.
-- For simplicity, assuming product_id 1=Laptop, 2=Mouse, 3=Keyboard, 4=T-Shirt, 5=Jeans, 6=Coffee, 7=Milk
-- Assuming transaction_id 1, 2, 3, 4
INSERT INTO SaleItems (transaction_id, product_id, quantity, unit_price_at_sale, item_total) VALUES
(1, 1, 1, 1200.00, 1200.00), -- Transaction 1: Laptop
(1, 2, 1, 25.50, 25.50),   -- Transaction 1: Mouse
(2, 5, 1, 45.00, 45.00),   -- Transaction 2: Jeans
(2, 4, 1, 15.00, 15.00),   -- Transaction 2: T-Shirt
(3, 6, 1, 12.99, 12.99),   -- Transaction 3: Coffee
(3, 7, 1, 3.50, 3.50),    -- Transaction 3: Milk
(4, 3, 1, 99.99, 99.99);   -- Transaction 4: Keyboard

-- Insert data into Inventory table
-- Assuming product_ids 1-7 from Products table
INSERT INTO Inventory (product_id, current_stock_quantity, reorder_level, location) VALUES
(1, 50, 10, 'Warehouse A'),
(2, 150, 30, 'Warehouse A'),
(3, 75, 15, 'Warehouse B'),
(4, 200, 50, 'Store Shelf 1'),
(5, 120, 20, 'Store Shelf 1'),
(6, 300, 60, 'Warehouse C'),
(7, 100, 20, 'Warehouse C');

